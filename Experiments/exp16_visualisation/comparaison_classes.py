import numpy as np
from fastdtw import fastdtw
from functools import lru_cache


class Singleton(type):
    _instances = {}

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class CachedLCS(metaclass=Singleton):
    def __init__(self):
        self.cache = {}
        self.operations = 0
        self.misses = 0

    def compute(self, x, y):
        self.operations += 1
        # Transform the numpy ndarray list into tuple to make it hashable
        # Keys from dict need to be hashable
        # The frozenset is hashable
        x, y = tuple(x), tuple(y)
        result = self.cache.get(frozenset([x, y]))
        if not result:
            self.misses += 1
            result = self.lcs_dp(x, y)
            self.cache[frozenset([x, y])] = result
        return result

    @staticmethod
    def lcs_dp(x, y):
        dp_table = np.zeros((len(x) + 1, len(y) + 1))
        for i in range(1, len(x) + 1):
            for j in range(1, len(y) + 1):
                if x[i - 1] == y[j - 1]:
                    dp_table[i - 1, j - 1] = 1 + dp_table[i - 2, j - 2]
                else:
                    dp_table[i - 1, j - 1] = max(dp_table[i - 1, j - 2], dp_table[i - 2, j - 1])
        return dp_table[len(x) - 1, len(y) - 1] / min(len(x), len(y))


class CachedDTW(metaclass=Singleton):
    def __init__(self):
        self.cache = {}
        self.operations = 0
        self.misses = 0

    def compute(self, x, y):
        result = self.cache.get(frozenset([x, y]))
        self.operations += 1
        if not result:
            self.misses += 1
            result = self.distance(x, y)
            self.cache[frozenset([x, y])] = result
        return result

    @staticmethod
    def custom_dist(a, b):
        return a != b

    def distance(self, a, b):
        l1, l2 = len(a), len(b)
        a = [ord(i) for i in a]
        b = [ord(i) for i in b]

        dtw_distance, _ = fastdtw(list(a), list(b), dist=CachedDTW.custom_dist)
        sim = (max(l1, l2) - dtw_distance) / max(l1, l2)
        return sim

if __name__ == '__main__':
    a = CachedLCS()