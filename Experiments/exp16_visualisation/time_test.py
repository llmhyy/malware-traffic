import time

a = time.time()
print(a)
time.sleep(2)
b = time.time()
print(b)
print(b-a)

def time_map(time_a, time_b, packet_a, packet_b, time_c, window_tolerance):
    """
    Map an API time into a packet number.
    This function was done in order to have a nice visualisation.
    The window tolereance is used to capture nearby calls
            =========     |
            ta      tb    tc=>pc
            pa      pb

    Args:
        time_a (float): time of the begining of the flow (in seconds since epoch, time.time())
        time_b (float): time of the ending of the flow
        packet_a (int): packet number of the begining of the flow
        packet_b (int): packet number of the ending of the flow
        time_c (float): time of the api call
        window_tolerance (int): time shift in second in which api calls are still considered to belong to the flow

    Returns:
        int: packet number, return None if the mapping fails
    """

    # Check if inside flow
    if time_a <= time_c <= time_b: # Chain comparaison
        return packet_a + (time_c - time_a) * (packet_b - packet_a) / (time_b - time_a)
    # Check if in the window border (simple)
    if time_a - window_tolerance <= time_c:
        return packet_a
    if time_c <= time_b + window_tolerance:
        return packet_b
    # Outside
    return None
