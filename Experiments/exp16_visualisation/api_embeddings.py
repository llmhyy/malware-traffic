import inspect
import tensorflow as tf
import numpy as np
import pprint
import re
from api_extraction import MalwareTraceExtractor


class Singleton(type):
	# Singleton modified to handle arguments (singleton for each argument set)
	_instances = {}
	_init = {}
	
	def __init__(cls, name, bases, dct):
		cls._init[cls] = dct.get('__init__', None)
	
	def __call__(cls, *args, **kwargs):
		init = cls._init[cls]
		if init is not None:
			key = (cls, frozenset(inspect.getcallargs(init, None, *args, **kwargs).items()))
		else:
			key = cls
		
		if key not in cls._instances:
			cls._instances[key] = super(Singleton, cls).__call__(*args, **kwargs)
		return cls._instances[key]


class Embedding(metaclass=Singleton):
	def __init__(self, malware_list):
		self.record = []
		for malware in malware_list:
			a = MalwareTraceExtractor("malware.exe", malware)
			b = a.get_merge_trace()
			self.record.append(b)
	
	def __generate_embeddings(self):
		pass
	
	def __generate_clustering(self):
		pass
	
	def convert(self):
		pass


if __name__ == "__main__":
	malware_list = ("trickbot1_1/", "trickbot1_2/", "trickbot1_3/", "trickbot1_5/")
	a = Embedding(malware_list)
