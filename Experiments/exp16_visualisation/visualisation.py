#pylint: disable=too-many-arguments

from segmentation import get_segmentation
from api_extraction import get_malware_traces
import matplotlib.pyplot as plt

color_dictionary = {
    'HANDSHAKE': 'xkcd:goldenrod',
    'TERM': 'xkcd:maroon',
    "IN":  'xkcd:green',
    'IN_TLS': 'xkcd:chartreuse',
    'OUT': 'xkcd:blue',
    'OUT_TLS': 'xkcd:sky blue',
    'TERM_RST': 'xkcd:red',
    "HANDSHAKE_FAILED": 'xkcd:red',
    'TLS_handshake': 'tab:brown',
    'Failed_TLS_handshake': 'xkcd:crimson'
}

MALWARE_NAME = "20-09-08-Trickbot-EXE-gtag-ono72.exe"
TIME_DELAY_ALLOWED = 20


def time_map(time_a, time_b, packet_a, packet_b, time_c, window_tolerance=TIME_DELAY_ALLOWED):
    """
    Map an API time into a packet number.
    This function was done in order to have a nice visualisation.
    The window tolereance is used to capture nearby calls
            =========     |
            ta      tb    tc=>pc
            pa      pb

    Args:
        time_a (float): time of the begining of the flow (in seconds since epoch, time.time())
        time_b (float): time of the ending of the flow
        packet_a (int): packet number of the begining of the flow
        packet_b (int): packet number of the ending of the flow
        time_c (float): time of the api call
        window_tolerance (int): time shift in second in which api calls are still considered to belong to the flow

    Returns:
        int: packet number, return None if the mapping fails
    """

    # Check if inside flow
    if time_a <= time_c <= time_b: # Chain comparaison
        return packet_a + (time_c - time_a) * (packet_b - packet_a) / (time_b - time_a)
    # Check if in the window border (simple)
    if time_a - window_tolerance <= time_c:
        return packet_a
    if time_c <= time_b + window_tolerance:
        return packet_b
    # Outside
    return None


def visualise():
    # TODO: better visualisation
    # TODO: variable are no longer explicit
    # TODO: display flows the old way, map around/into it the api calls

    # Get the segmentation in flows
    segmentations, packet_offsets = get_segmentation()
    # Initialize plot
    _, ax = plt.subplots(figsize=(20, 10))
    # Vectorize the plot with those variables
    plot_xranges = []
    plot_yranges = []
    plot_facecolors = []
    plot_labels = []

    for j in range(len(segmentations)):
        segmentation = segmentations[j]
        # For each group of packet, draw in the plot with the corresponding colors
        time_offset = packet_offsets[j]
        # list of [type, nb of packet interval, time interval, (size)]
        # print(segmentation)
        # For each identified type, draw it with correct color
        for i in range(len(segmentation)):
            type_color = color_dictionary.get(segmentation[i][0], 'tab:blue')
            # ['HANDSHAKE', [0, 2], [1612708961378936, 1612708961422139]],
            plot_xranges.append((time_offset + int(segmentation[i][1][0]), 1+int(segmentation[i][1][1]) - int(segmentation[i][1][0])))
            plot_yranges.append((0, 2))
            plot_facecolors.append(type_color)
            plot_labels.append(segmentation[i][0])
            # Graph in packets for each segm
            # ax.broken_barh([ (time_offset + int(segmentation[i][1][0]), 1+int(segmentation[i][1][1]) - int(segmentation[i][1][0]))], (0, 2), facecolors=type_color, label=segmentation[i][0])
            #ax.broken_barh([(segmentation[i][2][0], segmentation[i][2][1]-segmentation[i][2][0])], (0, 2), facecolors=type_color, label=segmentation[i][0])
            ax.grid(True)

    # Vectorized draw of segmentation
    ax.broken_barh(plot_xranges, (0, 2), facecolors=plot_facecolors, label=plot_labels)
    # FIXME: labels not properly working
    handles, labels = plt.gca().get_legend_handles_labels()
    by_label = dict(zip(labels, handles))
    print(by_label)

    plt.legend(by_label.values(), by_label.keys(), loc=4)

    # Variable that helps vectorizing the draw of arrows
    x_axis_positions = []
    annotations = []
    # Get the API traces
    traces_df_list = get_malware_traces()
    for trace_df in traces_df_list:
        # For each trace, get the lines and plot them
        trace_np = trace_df.to_numpy()
        for line in trace_np:
            _, api_name, _, time_in_int = line
            for i in range(len(segmentations)):
                segmentation = segmentations[i]
                time_offset = packet_offsets[j]
                for j in range(len(segmentation)):
                    if len(segmentation[j]) == 3:
                        _, pck_int, time_int = segmentation[j]
                    else: # Size is present for some kind of type
                        _, pck_int, time_int, _ = segmentation[j]
                    mapping = time_map(time_int[0], time_int[1], pck_int[0] + time_offset, pck_int[1] + time_offset, time_in_int)
                    if mapping:
                        # Draw arrows for each calls
                        x_axis_positions.append(mapping)
                        annotations.append(api_name)
                        # Old non-vectorized drawing, VERY LONG TO DRAW
                        # ax.arrow(mapping, 2, 0, 3)
                        # style = dict(size=10, color='gray', rotation='vertical')
                        # ax.text(mapping, 5, api_name, **style)

    # Generate label colors


    # Vectorize the draw of arrows
    ax.quiver(x_axis_positions, [2 for _ in range(len(x_axis_positions))], 0, 1, scale=20.0)
    #ax.quiverkey(quiv, x_axis_positions, [5 for _ in range(len(x_axis_positions))], )
    plt.xlabel('Time')
    plt.ylabel('TCP Socket')
    plt.ylim((-10, 10))
    plt.title("TCP Segmentation visualization")
    plt.show()


if __name__ == '__main__':
    visualise()
