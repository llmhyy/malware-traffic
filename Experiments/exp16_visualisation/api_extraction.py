import pandas as pd
import numpy as np
import glob
import os


def get_child_pids(current_pid, diff):
    """
    Get the child process pid of one process given its pid

    Args:
        current_pid (int): parent pid
        diff (pd dataframe): df recorded

    Returns:
        list: list of pids
    """

    childs = diff[diff["parent_pid"] == current_pid]
    if childs.shape[0] == 0:
        return [current_pid]
    return [current_pid] + [v for index, row in childs.iterrows() for v in get_child_pids(row["process_id"], diff)]


def get_malware_pids(malware_name="2020-09-08-Trickbot-EXE-gtag-ono72.exe"):
    """
    Get the pids of all the malware generated processes

    Args:
        malware_name (str, optional): name of the malware. Defaults to "2020-09-08-Trickbot-EXE-gtag-ono72.exe".

    Returns:
        list: list of pids
    """

    first = pd.read_csv("process_pre.csv")
    post = pd.read_csv("process_post.csv")

    first.drop(first.columns[0], axis=1, inplace=True)
    post.drop(post.columns[0], axis=1, inplace=True)

    diff = first.merge(post, indicator=True,
                       how='right').loc[lambda x: x['_merge'] != 'both']

    malware_pid = int(
        diff.loc[diff['process_name'] == malware_name]["process_id"])

    return get_child_pids(malware_pid, diff)


def get_malware_traces():
    """
    Get a list of dataframe representing the frida trace
    Its current format is [time, api_name, category]

    Returns:
        list: list of dataframe
    """

    #TODO: delete time duplicates
    pids = get_malware_pids()
    traces = []
    for pid in pids:
        if not os.path.isfile(f"frida_{pid}"):
            print("Trace for {pid} does not exist")
        header = ["time", "api", "category"]
        df = pd.read_csv(f"frida_{pid}", names=header)
        df.drop(df.loc[df['api'] == 'error'].index, inplace=True)
        df.reset_index(drop=True, inplace=True)
        traces.append(df)
        df["time_int"] = (df["time"] * 1000000).astype(int)
    return traces


if __name__ == "__main__":
    print(get_malware_traces())
