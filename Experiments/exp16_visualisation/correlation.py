from segmentation import get_segmentation
from api_extraction import get_malware_traces, get_segmented_flow_syscalls
from clustering import cluster_segmented_flow, segmented_to_char
import matplotlib.pyplot as plt
import numpy as np
from fastdtw import fastdtw
from comparaison_classes import CachedLCS, CachedDTW

# TODO: properly handle this
MALWARE_NAME = "malware.exe"
PATH = "trickbot1_1/"
TIME_DELAY_ALLOWED = 0


def intra_cluster_quality_matrix(cluster):
    LCS_engine = CachedLCS()
    n = len(cluster)
    matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(i):
            matrix[i][j] = LCS_engine.compute(cluster[i][:, 1], cluster[j][:, 1])
    # print(matrix)
    return np.sum(matrix) / (n * (n - 1) / 2)


def custom_dist(a, b):
    return a != b


def inter_cluster_similarity_matrix(cluster1, cluster2):
    DTW_engine = CachedDTW()
    m, n = len(cluster1), len(cluster2)
    matrix = np.zeros((m, n))
    for i in range(m):
        for j in range(n):
            matrix[i][j] = DTW_engine.compute(cluster1[i], cluster2[j])
    # print(matrix)
    return np.sum(matrix) / (n * m)


def inter_cluster_intention_matrix(cluster1, cluster2):
    LCS_engine = CachedLCS()
    m, n = len(cluster1), len(cluster2)
    matrix = np.zeros((m, n))
    for i in range(m):
        for j in range(n):
            matrix[i][j] = LCS_engine.compute(cluster1[i][:, 1], cluster2[j][:, 1])
    # print(matrix)
    return np.sum(matrix) / (n * m)


def correlate():
    # Get the segmentation in flows
    segmentations, _ = get_segmentation(path=PATH, malware_process_name=MALWARE_NAME)
    cluster_indexes, nb_class = cluster_segmented_flow(segmentations)
    call_dict = {k: np.empty((0, 4)) for k in range(nb_class)}
    call_dict2 = {k: [] for k in range(nb_class)}
    for i in range(len(segmentations)):
        segmentation = segmentations[i]
        cluster = cluster_indexes[i]
        syscalls = get_segmented_flow_syscalls(segmentation, MALWARE_NAME, path=PATH,
                                               time_delay_allowed=TIME_DELAY_ALLOWED)
        if syscalls.shape[0]:
            call_dict[cluster] = np.vstack((call_dict[cluster], syscalls))
            call_dict2[cluster].append(syscalls)
    for k, v in call_dict.items():
        sorted_indexes = np.argsort(v[:, -1])
        call_dict[k] = v[sorted_indexes]
    # Building final research matrix
    X = []
    Y = []
    for i in range(nb_class):
        for j in range(nb_class):
            if i == j:
                continue
            appearance = inter_cluster_similarity_matrix(
                np.array(segmented_to_char(segmentations)[0])[cluster_indexes == i],
                np.array(segmented_to_char(segmentations)[0])[cluster_indexes == j])
            intention = inter_cluster_intention_matrix(call_dict2[i], call_dict2[j])
            X.append(appearance)
            Y.append(intention)
    plt.scatter(X, Y)
    plt.show()

    # intra_cluster_quality_matrix(call_dict2[k])
    # inter_cluster_similarity_matrix(np.array(segmented_to_char(segmentations)[0])[cluster_indexes == 0],np.array(segmented_to_char(segmentations)[0])[cluster_indexes == 1])
    # inter_cluster_similarity_matrix(np.array(segmented_to_char(segmentations)[0])[cluster_indexes == 0],np.array(segmented_to_char(segmentations)[0])[cluster_indexes == 0])
    # inter_cluster_intention_matrix(call_dict2[0], call_dict2[1])


# TODO: do matrix on this to answer research question 1

if __name__ == "__main__":
    correlate()
    print("-------Caching------------------------------")
    a = CachedLCS()
    print("LCS --- ", a.operations, " ops, ", a.misses, " misses")
    a = CachedDTW()
    print("DTW --- ", a.operations, " ops, ", a.misses, " misses")
