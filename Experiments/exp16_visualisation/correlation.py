import matplotlib.pyplot as plt
import numpy as np
from scipy import stats
from typing import Tuple, Optional, List
from entropy import BlackListProvider

from api_extraction import get_segmented_flow_syscalls
from clustering import cluster_segmented_flow, SegmentedConvertor
from comparaison_classes import CachedLCS, CachedSW, CachedCustomLCS
from segmentation import get_segmentation

TIME_DELAY_ALLOWED = 10


def inter_cluster_sim_scores_random(api_calls_per_flow_list_cluster1: np.ndarray,
                                    api_calls_per_flow_list_cluster2: np.ndarray, segmented_flows_cluster1: np.ndarray,
                                    segmented_flows_cluster2: np.ndarray, category: bool = False) -> Tuple[
	Optional[float], Optional[float]]:
	"""
	Calculate the two scores between 2 clusters of different malwares (api call similarity score = intention and flows similarity score = similarity/appearance)
	:param api_calls_per_flow_list_cluster1:
	:param api_calls_per_flow_list_cluster2:
	:param segmented_flows_cluster1:
	:param segmented_flows_cluster2:
	:param category:
	:return:
	"""
	if category:
		api_call_sublist_index = 2
	else:
		api_call_sublist_index = 1
	intention_engine = CachedLCS(c_lib=True)
	similarity_engine = CachedCustomLCS(c_lib=True)
	# Number of api call sequence for the selected clusters
	m, n = len(api_calls_per_flow_list_cluster1), len(api_calls_per_flow_list_cluster2)
	if m == 0 or n == 0:
		return None, None
	# Number of segmented flows for the selected clusters
	a, b = len(segmented_flows_cluster1), len(segmented_flows_cluster2)
	if a == 0 or b == 0:
		return None, None
	# These numers are supposed to be the same
	if m != a or n != b:
		raise RuntimeError("Problem here : wrong arguments")
	
	# Get indexes with non-null api call sequence
	non_empty_indexes_1 = [i for i in range(len(api_calls_per_flow_list_cluster1)) if
	                       len(api_calls_per_flow_list_cluster1[i]) != 0]
	non_empty_indexes_2 = [i for i in range(len(api_calls_per_flow_list_cluster2)) if
	                       len(api_calls_per_flow_list_cluster2[i]) != 0]
	
	# Check if a flow has a non-null api call sequence
	if len(non_empty_indexes_1) == 0 or len(non_empty_indexes_2) == 0:
		return None, None
	
	# Take random flows
	i, j = np.random.choice(non_empty_indexes_1), np.random.choice(non_empty_indexes_2)
	x_api_call, y_api_call = api_calls_per_flow_list_cluster1[i][:, api_call_sublist_index], \
	                         api_calls_per_flow_list_cluster2[j][:, api_call_sublist_index]
	x_flow, y_flow = segmented_flows_cluster1[i], segmented_flows_cluster2[j]
	sim = similarity_engine.compute(x_flow, y_flow)
	intention = intention_engine.compute(x_api_call, y_api_call)
	return sim, intention


def get_malware_segmentation_cluster_sequence(path: str, malware_process_name: str):
	# Get the segmentation in flows
	segmentations, _ = get_segmentation(path=path, malware_process_name=malware_process_name)
	cluster_indexes, nb_class = cluster_segmented_flow(segmentations)
	call_dict = {k: np.empty((0, 4)) for k in range(nb_class)}
	call_dict2 = {k: [] for k in range(nb_class)}
	for i in range(len(segmentations)):
		segmentation = segmentations[i]
		cluster = cluster_indexes[i]
		syscalls = get_segmented_flow_syscalls(segmentation, malware_process_name, path=path,
		                                       time_delay_allowed=TIME_DELAY_ALLOWED)
		# if no syscall associated in current flow (segmentations[i]) of cluster cluster_indexes[i], add an empty list
		if syscalls.shape[0]:
			call_dict[cluster] = np.vstack((call_dict[cluster], syscalls))
			call_dict2[cluster].append(syscalls)
		elif len(syscalls) == 0:
			call_dict2[cluster].append(np.array([]))
		else:
			raise RuntimeError("Problem here : corner case")
	for k, v in call_dict.items():
		print(f"Cluster {k} : {v.shape}")
		sorted_indexes = np.argsort(v[:, -1])
		call_dict[k] = v[sorted_indexes]
	return segmentations, cluster_indexes, nb_class, call_dict, call_dict2


def correlate(list_of_paths: List):
	segmentations_list, cluster_indexes_list, nb_classes_list, call_dict1_list, call_dict2_list = [], [], [], [], []
	x_list = []
	y_list = []
	segmented_convertor = SegmentedConvertor()
	black_list_provider = BlackListProvider()
	for path in list_of_paths:
		segmentations1, cluster_indexes1, nb_class1, call_dict_1, call_dict2_1 = get_malware_segmentation_cluster_sequence(
			path, "malware.exe")
		segmentations_list.append(segmentations1)
		cluster_indexes_list.append(cluster_indexes1)
		nb_classes_list.append(nb_class1)
		call_dict1_list.append(call_dict_1)
		call_dict2_list.append(call_dict2_1)
		black_list_provider.add_malware_file(path, nb_class1, call_dict_1)
	# Segmentation list = list of segmented malwares (len = nb of malware)
	for x in range(len(segmentations_list)):
		for y in range(x):
			segmentations1, cluster_indexes1, nb_class1, call_dict_1, call_dict2_1 = segmentations_list[x], \
			                                                                         cluster_indexes_list[x], \
			                                                                         nb_classes_list[x], \
			                                                                         call_dict1_list[x], \
			                                                                         call_dict2_list[x]
			segmentations2, cluster_indexes2, nb_class2, call_dict_2, call_dict2_2 = segmentations_list[y], \
			                                                                         cluster_indexes_list[y], \
			                                                                         nb_classes_list[y], \
			                                                                         call_dict1_list[y], \
			                                                                         call_dict2_list[y]
			for i in range(nb_class1):
				for j in range(nb_class2):
					typegroups1 = segmented_convertor.segmented_to_typegroups(segmentations1)
					typegroups2 = segmented_convertor.segmented_to_typegroups(segmentations2)
					appearance, intention = inter_cluster_sim_scores_random(call_dict2_1[i], call_dict2_2[j],
					                                                        np.array(typegroups1, dtype=object)[
						                                                        cluster_indexes1 == i],
					                                                        np.array(typegroups2, dtype=object)[
						                                                        cluster_indexes2 == j], category=False)
					if intention is None or appearance is None:
						continue
					x_list.append(appearance)
					y_list.append(intention)
	# noinspection PyTypeChecker
	pear = stats.pearsonr(x_list, y_list)
	# noinspection PyTypeChecker
	spear = stats.spearmanr(x_list, y_list)
	text = f"Pearson r={pear[0]:.4f}, pva={pear[1]:.4f}\nSpearman r={spear[0]:.4f}, pva={spear[1]:.4f}"
	
	fig = plt.figure()
	plt.xlabel("Cluster similarity\n" + text)
	plt.ylabel("API Call Sequence similarity")
	h = plt.hist2d(x_list, y_list, bins=[25, 25], range=[[0, 1], [0, 1]])
	plt.colorbar(h[3])
	plt.plot([0, 1], [0, 1], ls="--", c=".3")
	fig.subplots_adjust(bottom=0.2)
	plt.show()
	fig = plt.figure()
	plt.xlabel("Cluster similarity\n" + text)
	plt.ylabel("API Call Sequence similarity")
	plt.scatter(x_list, y_list)
	plt.xlim([0, 1])
	plt.ylim([0, 1])
	fig.subplots_adjust(bottom=0.2)
	plt.show()
	print(pear, spear)


if __name__ == "__main__":
	np.random.seed(1)
	correlate(["trickbot1_1/", "trickbot1_2/", "trickbot1_3/", "trickbot1_5/"])
	print("-------Caching------------------------------")
	CachedLCS().print_stat()
	CachedCustomLCS().print_stat()
	CachedSW().print_stat()
