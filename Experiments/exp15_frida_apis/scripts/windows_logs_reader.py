import win32evtlog
import ast
import datetime
from datetime import datetime
import pandas as pd
import time
import config_vm as config
import os

timeout = time.time() + config.time_to_run
file_path_dir = os.path.abspath("./exp/")
filename = os.path.join(file_path_dir, "win_logs.csv")

def initialize_dataframe():
    #columns = ["date_time", "status", "process_id", "parent_pid", "process_name", "event", "other"]
	columns = ["date_time", "status", "process_id", "parent_pid", "process_name"]
	df = pd.DataFrame(columns=columns)
	return df

# Events :
event_codes = {
	4688: "process_creation",
	4689: "process_termination",
	4663: "file_creation", #Also key creation, see bellow 
	4698: "scheduled_task",
	4657: "register_modification"
}

""" File creation :
('S-1-5-21-520244864-3345261719-3862814978-1001', 'nima', 'nima-PC', '0x10c6b', 'Security', 'File', 'C:\\Users\\nima\\AppData\\Local\\GDIPFONTCACHEV1.DAT', '0x528', '%%4417\r\n\t\t\t\t', '0x2', '0xd90', 'C:\\Windows\\System32\\mmc.exe')
('S-1-5-21-520244864-3345261719-3862814978-1001', 'nima', 'nima-PC', '0x10c6b', 'Security', 'Key', '\\REGISTRY\\USER\\S-1-5-21-520244864-3345261719-3862814978-1001\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartPage\\NewShortcuts', '0xdc0', '%%1537\r\n\t\t\t\t', '0x10000', '0x674', 'C:\\Windows\\explorer.exe')
"""

""" Task creation :
('S-1-5-21-520244864-3345261719-3862814978-1001', 'nima', 'nima-PC', '0x10c6b', '\\dd', '<?xml version="1.0" encoding="UTF-16"?>\r\n<Task version="1.2" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task">\r\n  <RegistrationInfo>\r\n    <Date>2021-01-27T01:24:15.1126024</Date>\r\n    <Author>nima-PC\\nima</Author>\r\n  </RegistrationInfo>\r\n  <Triggers>\r\n
 <CalendarTrigger>\r\n      <StartBoundary>2021-01-27T01:24:06.5244154</StartBoundary>\r\n      <Enabled>true</Enabled>\r\n
     <ScheduleByDay>\r\n        <DaysInterval>1</DaysInterval>\r\n      </ScheduleByDay>\r\n    </CalendarTrigger>\r\n  </Triggers>\r\n  <Principals>\r\n    <Principal id="Author">\r\n      <RunLevel>LeastPrivilege</RunLevel>\r\n      <UserId>nima-PC\\nima</UserId>\r\n      <LogonType>InteractiveToken</LogonType>\r\n    </Principal>\r\n  </Principals>\r\n  <Settings>\r\n    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\r\n    <DisallowStartIfOnBatteries>true</DisallowStartIfOnBatteries>\r\n    <StopIfGoingOnBatteries>true</StopIfGoingOnBatteries>\r\n    <AllowHardTerminate>true</AllowHardTerminate>\r\n    <StartWhenAvailable>false</StartWhenAvailable>\r\n    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\r\n    <IdleSettings>\r\n      <Duration>PT10M</Duration>\r\n      <WaitTimeout>PT1H</WaitTimeout>\r\n      <StopOnIdleEnd>true</StopOnIdleEnd>\r\n      <RestartOnIdle>false</RestartOnIdle>\r\n    </IdleSettings>\r\n    <AllowStartOnDemand>true</AllowStartOnDemand>\r\n    <Enabled>true</Enabled>\r\n    <Hidden>false</Hidden>\r\n    <RunOnlyIfIdle>false</RunOnlyIfIdle>\r\n    <WakeToRun>false</WakeToRun>\r\n    <ExecutionTimeLimit>P3D</ExecutionTimeLimit>\r\n    <Priority>7</Priority>\r\n  </Settings>\r\n  <Actions Context="Author">\r\n    <ShowMessage>\r\n      <Title>dd</Title>\r\n      <Body>dd</Body>\r\n    </ShowMessage>\r\n  </Actions>\r\n</Task>')
"""

""" Register modification :
('S-1-5-21-520244864-3345261719-3862814978-1001', 'nima', 'nima-PC', '0x1aeb6', 
4																																														5
'\\REGISTRY\\USER\\S-1-5-21-520244864-3345261719-3862814978-1001\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\\Count', 'Zvpebfbsg.
					6 			7		8		9			10			11		12		13
IvfhnyFghqvbPbqr', '0x534', '%%1905', '%%1875', '%%1800', '%%1875', '%%1800', '0x83c', 'C:\\Windows\\explorer.exe')
"""

def retrieve_system_logs():
	print("Retrieving system logs...")
	# Having a bench mark time set to understand and only collect logs from stipulated time

	# now = datetime.strptime(str(datetime.now()).split(".")[0], "%Y-%m-%d %H:%M:%S")
	now = datetime.now()
	# Initializing dataframe to be used for output
	df = initialize_dataframe()

    #Iterating through the process to add on to the dataframe
	while time.time() < timeout:
		# Initializing the settings for win32evtlog
		server = 'localhost' # name of the target computer to get event logs
		logtype = 'Security'
		hand = win32evtlog.OpenEventLog(server,logtype)
		flags = win32evtlog.EVENTLOG_BACKWARDS_READ|win32evtlog.EVENTLOG_SEQUENTIAL_READ
		total = win32evtlog.GetNumberOfEventLogRecords(hand)
		events = win32evtlog.ReadEventLog(hand, flags,0)

		if not events:
			continue
		for event in events:
			event_datetime = datetime.strptime(str(event.TimeGenerated), '%Y-%m-%d %H:%M:%S')
			if event_datetime >= now:    
				status = event_codes.get(event.EventID, "unknown")
				if status == "file_creation":
					data = event.StringInserts
					if data:
						time_generated = str(event.TimeGenerated)
						if "%" not in data[6]:
							try:
								process_id = str(ast.literal_eval(data[10]))
							except ValueError:
								continue
						if data[5] == "Key":
							status = "key_creation"
						file_created = data[6]
						process_name = data[11]

						if None not in (time_generated, status, file_created, process_id, process_name):
							row = [time_generated, status, process_id, file_created, process_name]
							df = df.append(pd.Series(row, index=df.columns), ignore_index=True).drop_duplicates()
				if status == "register_modification":
					data = event.StringInserts
					if data:
						time_generated = str(event.TimeGenerated)
						try:
							process_id = str(ast.literal_eval(data[12]))
							file_created = data[4] + data[5]
							process_name = data[13]
						except ValueError:
							print("Error in register mod")
							continue

						if None not in (time_generated, status, file_created, process_id, process_name):
							row = [time_generated, status, process_id, file_created, process_name]
							df = df.append(pd.Series(row, index=df.columns), ignore_index=True).drop_duplicates()

				elif status == "scheduled_task":
					data = event.StringInserts
					if data:
						time_generated = str(event.TimeGenerated)
						task_name = data[5]
						if None not in (time_generated, status, task_name):
							row = [time_generated, status, task_name, None, None]
							df = df.append(pd.Series(row, index=df.columns), ignore_index=True).drop_duplicates()
				elif status != "unknown":
					data = event.StringInserts
					if data:
						process_name = data[5]
						time_generated = str(event.TimeGenerated)
						try: 
							process_id = str(ast.literal_eval(data[4]))
							parent_pid = str(ast.literal_eval(data[7]))
						except ValueError:
							continue
						if None not in (time_generated, status, process_id, parent_pid, process_name):
							row = [time_generated, status, process_id, parent_pid, process_name]
							df = df.append(pd.Series(row, index=df.columns), ignore_index=True).drop_duplicates()
		time.sleep(1)

	df.to_csv(filename)

if __name__ == '__main__' : 
	retrieve_system_logs()
    