import argparse
import subprocess
import time
import os
import datetime
import logging
import re
from shutil import copy

parser = argparse.ArgumentParser()
parser.add_argument('-vbox', '--vbox', help='Input directory path of VirtualBox', required=False, default="C:\Program Files\Oracle\VirtualBox")
parser.add_argument('-snap', '--snapshot', help='Input snapshot name to revert to', required=False)
parser.add_argument('-md', '--maldir', help='Input malware directory in Virtual Machine', required=False)
args = parser.parse_args()

date = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

### VirtualBox utility functions
def start_vm(name):
    cmd = args.vbox + "/VBoxManage.exe" + " startvm " + name
    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    o_cprog, _ = proc.communicate()
    if b"successfully started" in o_cprog:
        logging.info('VM Started')
        return 0
    else:
        logging.warning(f'Problem with VM\n {o_cprog.decode()}')
        return -1

def custom_command_vm(name, cmd):
    cmd = args.vbox + "/VBoxManage.exe" + " guestcontrol " + name + " run --exe " + cmd + " --username nima"
    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    o_cprog, _ = proc.communicate()

def custom_command_vm_without_output(name, cmd):
    cmd = args.vbox + "/VBoxManage.exe" + " guestcontrol " + name + " run --exe " + cmd + " --username nima"
    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

def custom_command_vm_with_arg(name, cmd, arg):
    cmd = f"{args.vbox}/VBoxManage.exe guestcontrol {name} run --exe {cmd} --username nima -- {cmd} {arg}"
    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    o_cprog, e = proc.communicate()
    print(o_cprog, e)

def get_snapshots(name):
    cmd = args.vbox + "/VBoxManage.exe" + " showvminfo " + name
    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    o_cprog, _ = proc.communicate()
    snapshots = re.findall(r"Name: (.*?) \(UUID: ([a-f0-9-]+)\)", o_cprog.decode())
    return snapshots

def set_snapshot(name, snapshot):
    cmd = args.vbox + "/VBoxManage.exe" + " snapshot " + name + " restore " + snapshot
    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    o_cprog, _ = proc.communicate()
    print(o_cprog)

def shutdown_vm(name):
    cmd = args.vbox + "/VBoxManage.exe" + " controlvm " + name + " poweroff "
    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    o_cprog, _ = proc.communicate()
    return

def mkdir(name, dirname):
    cmd = args.vbox + "/VBoxManage.exe" + " guestcontrol " + name + " mkdir " + "dirname"
    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    o_cprog, _ = proc.communicate()
    print(o_cprog)
    return

def copy_from(name, src, dst):
    cmd = f"{args.vbox}/VBoxManage.exe guestcontrol {name} copyfrom {src} {dst}"
    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    o_cprog, e_cprog = proc.communicate()
    print(o_cprog, e_cprog)
    return

def copy_to(name, src, dst):
    cmd = f"{args.vbox}/VBoxManage.exe guestcontrol {name} copyto {src} {dst}"
    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    o_cprog, e_cprog = proc.communicate()
    print(o_cprog, e_cprog)
    return

def get_stat(name, filepath):
    cmd = f"{args.vbox}/VBoxManage.exe guestcontrol {name} stat {filepath}"
    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    o_cprog, e_cprog = proc.communicate()
    print(o_cprog, e_cprog)
    return

def delete_file(name, filepath):
    cmd = f"{args.vbox}/VBoxManage.exe guestcontrol {name} removefile {filepath}"
    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    o_cprog, e_cprog = proc.communicate()
    print(o_cprog, e_cprog)
    return

### Project related functions

def results_recovery(name, dst="C:/Users/nima/Desktop/"):
    filenames = ["netstat.csv", "process_post.csv", "process_pre.csv", "win_logs.csv", "capture.pcap"]
    path = "C:/Users/nima/Desktop/scripts/exp/"
    for file_to_copy in filenames:
        file_path = path + file_to_copy
        copy_from(name, file_path, dst)
        time.sleep(1)
        delete_file(name, file_path)

def copy_malware(name, malware_name):
    custom_command_vm_with_arg(name, "C:/Users/nima/AppData/Local/Programs/Python/Python38-32/python.exe", f"C:/Users/nima/Desktop/scripts/copy_malware.py {malware_name}")  


if __name__ == "__main__":
    """shutdown_vm("W10-Pin-Isolated-Network")
    time.sleep(3)
    set_snapshot("W10-Pin-Isolated-Network", "af440168-8246-423a-9d93-7c08add01832")
    start_vm("W10-Pin-Isolated-Network")
    time.sleep(3)
    time.sleep(3)"""
    #get_stat("W10-Pin-Isolated-Network", "C:/Users/nima/Desktop/inscount0.dsll")
    #custom_command_vm("W10-Pin-Isolated-Network", "C:/Windows/System32/calc.exe")
    #custom_command_vm("W10-Pin-Isolated-Network", "C:/Users/nima/Desktop/scripts/activate.bat")
    #results_recovery("W10-Pin-Isolated-Network", "C:/Users/nima/Desktop/results")
    #custom_command_vm_with_arg("W10-Pin-Isolated-Network", "C:/Users/nima/AppData/Local/Programs/Python/Python38-32/python.exe", "C:/Users/nima/Desktop/scripts/copy_malware.py haha.txt")
    print(get_snapshots("W10-Pin-Isolated-Network"))

    # Get malwares on guest from generated list
    malware_file = open("paths.txt", "r")
    pathss = malware_file.readlines()

    # Divide malware lists to 2 VMs
    first_paths = pathss[:len(pathss)//2]
    second_paths = pathss[len(pathss)//2:]

    for paths in first_paths[17:]:
        # Launch malware and recover
        test_path = paths.lstrip(r"\n").split("\n")[0][1:]
        set_snapshot("W10-Pin-Isolated-Network", "36dae01e-0db0-47df-9bcb-c8ae336555d3")
        start_vm("W10-Pin-Isolated-Network")
        time.sleep(5)

        print(test_path)
        custom_command_vm("W10-Pin-Isolated-Network", "C:/Users/nima/Desktop/scripts/activate.bat")
        copy_malware("W10-Pin-Isolated-Network", test_path)
        time.sleep(45)

        custom_command_vm_without_output("W10-Pin-Isolated-Network", "C:/Users/nima/Desktop/scripts/malware.exe")
        print("Malware launched")
        time.sleep(3660)
        results_recovery("W10-Pin-Isolated-Network", "C:/Users/nima/Desktop/results")

        time.sleep(5)
        shutdown_vm("W10-Pin-Isolated-Network")

        # Collect the results in a folder
        os.mkdir(f"./results/{test_path.replace('.bin', '')}", mode=0o777)
        filenames = ["netstat.csv", "process_post.csv", "process_pre.csv", "win_logs.csv", "capture.pcap"]
        for file_rec in filenames:
            result_folder = "C:/Users/nima/Desktop/results/"
            copy(result_folder+file_rec, f"./results/{test_path.replace('.bin', '')}/")
