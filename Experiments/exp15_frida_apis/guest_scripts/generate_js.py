import glob
import json
import re


def template(category, api, dll):

    return f"""
    try{{
        Interceptor.attach(Module.getExportByName('{dll}', '{api}'), {{
        onEnter: function (args) {{
            send({{
            api_name: '{api}',
            category: '{category}'
            }});
        }}
        }});
    }}
    catch(error){{
        send({{
        api_name: 'error',
        category: 'import not found in app'
        }});
    }}
    """


def list_template(json_string):

    return f"""
    const array = {json_string};
    for (const element of array){{
        let category = element.category;
        let api = element.api;
        let dll = element.dll;
        try{{
            Interceptor.attach(Module.getExportByName(dll, api), {{
            onEnter: function (args) {{
                send({{
                api_name: api,
                category: category
                }});
            }}
            }});
        }}
        catch(error){{
        }}
    }}
    """


def generate_js_old(file):
    new_js = ""
    with open(file, 'r') as f:
        lines = f.readlines()
        for api in lines:
            api = api.strip("\n")
            category, api_name, dll = api.split(",")
            new_js += template(category, api_name, dll)
    return new_js


def generate_js(file):
    array = []
    with open(file, 'r') as f:
        lines = f.readlines()
        for api in lines:
            api = api.strip("\n")
            category, api_name, dll_name = api.split(",")
            array.append({"category": category, "api": api_name, "dll": dll_name})
    return list_template(json.dumps(array))


def generate_js_from_db():
    #TODO: import more api calls without crashing Frida
    #FIXME: does not work
    array = []
    db = API_Database()
    for key in db.api_dict:
        dll_name, api_name = db.api_dict[key]
        category = db.category_dict[key]
        array.append({"category": category, "api": api_name, "dll": dll_name})
    return list_template(json.dumps(array))


class API_Database:

    def __init__(self):
        api_dict = {}
        category_dict = {}

        json_files = []
        for file in glob.glob("./winapi-json/api_by_category/*.json"):
            json_files.append(file)
        for json_file in json_files:
            with open(json_file, 'r') as file:
                json_descriptor = json.loads(file.read())
                for api_fun in json_descriptor:
                    # TODO: regex to only take *.dll without the comments
                    dll = api_fun['dll']
                    re.findall(r'(.+\.dll)', dll)
                    name = api_fun['name']
                    category = json_file.split(".")[0]
                    api_dict[name.lower()] = (dll, name)
                    category_dict[name.lower()] = category

        self.api_dict = api_dict
        self.category_dict = category_dict
    def getDll(self, name):
        name = name.lower()
        try:
            dll, fun_name = self.api_dict.get(name)
        except TypeError:
            print(f"{name} not found")
            return None
        return dll, fun_name


if __name__ == "__main__":
    """js = generate_js("./api_list.txt")
    print(js)"""

    # From list
    db = API_Database()
    api_set = set()
    with open("new_api_list.txt", "w") as new_file:
        with open("api_list.txt", "r") as old_file:
            old_lines = old_file.readlines()
            for old_line in old_lines:
                nb_col = len(old_line.strip('\n').split(','))
                if nb_col == 3:  # Already here
                    new_file.write(old_line)
                elif nb_col == 2:
                    cat, name = old_line.strip('\n').split(',')
                    if name not in api_set:
                        api_set.add(name)
                        db_result = db.getDll(name)
                        if db_result:
                            dll, fun_name = db_result
                            new_file.write(f"{cat},{fun_name},{dll}\n")
