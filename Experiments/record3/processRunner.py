import psutil
import time
import pandas as pd
import os
import signal
import sys

TIME_TO_RUN = 180

# Listing current file path
file_path_dir = os.path.abspath("./")

timeout = time.time() + TIME_TO_RUN
columns = ["process_name", "process_id", "parent_pid", "path"]
preprocess_df = pd.DataFrame(columns=columns)

##########################################################################################
# Pre-execution image of processes
##########################################################################################
for process in psutil.process_iter():
	try:
		path = process.cwd()
	except (psutil.AccessDenied, UnicodeDecodeError):
		path = ''
		pass
	try:
		name = process.name()
	except (psutil.AccessDenied, UnicodeDecodeError):
		name = '__unknown'
		pass
	row = [name, process.pid, process.ppid(), path]
	preprocess_df = preprocess_df.append(pd.Series(row, index=preprocess_df.columns), ignore_index=True).drop_duplicates()

print("Writing to first image CSV...")
preprocess_df.to_csv(os.path.join(file_path_dir, "process_pre.csv"))

##########################################################################################
# Execution image of processes
##########################################################################################
postprocess_df = pd.DataFrame(columns=columns)
# Iterating through the process to add on to the dataframe
def signal_handler(sig, frame):
	print("Writing looped image to CSV...")
	postprocess_df.to_csv(os.path.join(file_path_dir, "process_post.csv"))
	sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)


while time.time() < timeout:
	for process in psutil.process_iter():
		try:
			path = process.cwd()
		except (psutil.AccessDenied, UnicodeDecodeError):
			path = ''
			pass
		try:
			name = process.name()
		except (psutil.AccessDenied, UnicodeDecodeError):
			name = '__unknown'
			pass
		row = [name, process.pid, process.ppid(), path]
		postprocess_df = postprocess_df.append(pd.Series(row, index=postprocess_df.columns), ignore_index=True).drop_duplicates()


# Done with netstat: writing to csv
print("Writing looped image to CSV...")
postprocess_df.to_csv(os.path.join(file_path_dir, "process_post.csv"))