import psutil
import pandas as pd
import time
import signal
import sys
import os

TIME_TO_RUN = 180

# Listing current file path
file_path_dir = os.path.abspath("./")

timeout = time.time() + TIME_TO_RUN

proto_dictionary = {
    ("AF_INET", 1): 'tcp',
    ("AF_INET6", 1): 'tcp6',
    ("AF_INET", 2): 'udp',
    ("AF_INET6", 2): 'udp6',
}

# Initializing DataFrame to be store netstat data
columns_ns = ['Protocol', 'Source', 'Destination', 'State', 'Process', 'Process ID', 'Parent Process ID']
netstat_df = pd.DataFrame(columns=columns_ns)
def signal_handler(sig, frame):
    print("Writing to CSV...")
    netstat_path = os.path.join(file_path_dir, "netstat.csv")
    netstat_df.to_csv(netstat_path)
    sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)


print("Performing netstat for " + str(TIME_TO_RUN) + " seconds...")
# Loop here!
while time.time() < timeout:
    proc_names = {}
    for process in psutil.process_iter(attrs=['pid', 'name', 'ppid']):
        if process.info['name']:
            proc_names[process.info['pid']] = process.info['name'] + "," + str(process.info['ppid'])
        else:
            proc_names[process.info['pid']] = "___unknown" + "," + str(process.info['ppid'])

    for connections in psutil.net_connections():
        row = []
        # Getting protocol
        family = str(connections.family).split(".")[1]
        protocol = proto_dictionary[(family, int(connections.type))]
        # Getting source IP
        sourceIP = connections.laddr.ip
        sourcePort = connections.laddr.port
        source = str(sourceIP) + ":" + str(sourcePort)
        # Getting dst IP
        if connections.raddr:
            dstIP = connections.raddr.ip
            dstPort = connections.raddr.port
            dst = str(dstIP) + ":" + str(dstPort)
        else:
            dstIP = dstPort = dst = ""

        # Getting state
        state = connections.status
        # Getting process
        try:
            process = proc_names.get(connections.pid).split(",")[0]
            process_ppid = proc_names.get(connections.pid).split(",")[1]
        except KeyError:
            continue
        # Getting process id
        process_id = connections.pid
        # Appending to rows to prepare to add to data frame
        if None not in (protocol, source, dst, state, process, process_id, process_ppid):
            row = [protocol, source, dst, state, process, process_id, process_ppid]
            netstat_df = netstat_df.append(pd.Series(row, index=netstat_df.columns), ignore_index=True).drop_duplicates()
        else:
            continue

# Done with netstat: writing to csv
print("Writing to CSV...")
netstat_path = os.path.join(file_path_dir, "netstat.csv")
netstat_df.to_csv(netstat_path)